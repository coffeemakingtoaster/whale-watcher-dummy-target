# Inspired by https://github.com/jjhenkel/binnacle-icse2020/blob/master/datasets/6-gold-rules/gold-rules.ts

name: Serious ruleset
rules:
  - scope: output
    category: Negative
    instruction: |
      assert(command_util.uses_substring_anywhere("http://"))
    description: Ensure that only https connections are used
    id: use_https_over_http
    target: command
    long_description: |
      Http connections are generally unsafe! Instead https should be used.

  - scope: output
    category: Negative
    instruction: |
      assert(command_util.command_always_has_param("curl","-f"))
    description: Ensure that curl always uses -f flag
    id: curl_always_use_f
    target: command
    fix_instruction: |
      fix_util.ensure_command_always_has_param("curl", "-f")
      fix_util.finish()
    long_description: |
      Curl should always use the -f flag

  - scope: output
    category: Negative
    instruction: |
      assert(command_util.command_always_has_param("apt-get install","-y"))
    description: Ensure that apt get has the -y flag
    id: apt_get_always_agree
    target: command
    fix_instruction: |
      fix_util.ensure_command_always_has_param("apt-get install", "-y")
      fix_util.finish()
    long_description: |
      The -y flag is needed for non interactive environments.

  - scope: output
    category: Negative
    instruction: |
      assert(command_util.command_always_has_param("apt install","-y"))
    description: Ensure that apt has the -y flag
    id: apt_always_agree
    fix_instruction: |
      fix_util.ensure_command_always_has_param("apt install", "-y")
      fix_util.finish()
    target: command
    long_description: |
      The -y flag is needed for non interactive environments.

  - scope: output
    category: Negative
    instruction: |
      assert(command_util.command_always_has_param("apt-get install","--no-install-recommends"))
    description: Ensure that apt get always skips recommends
    id: apt_get_skip_recommends
    target: command
    fix_instruction: |
      fix_util.ensure_command_always_has_param("apt-get install", "--no-install-recommends")
      fix_util.finish()
    long_description: |
      Don't install unwanted recommended packages

  - scope: output
    category: Negative
    instruction: |
      assert(command_util.command_always_has_param("apt install","--no-install-recommends"))
    description: Ensure that apt always skips recommends
    id: apt_skip_recommends
    target: command
    fix_instruction: |
      fix_util.ensure_command_always_has_param("apt install", "--no-install-recommends")
      fix_util.finish()
    long_description: |
      Don't install unwanted recommended packages

  - scope: output
    category: Negative
    instruction: |
      # maybe add fs check?
      assert(command_util.command_always_has_param("apk add","--no-cache"))
    description: Ensure that apk doesn't use cache
    id: apk_no_cache
    target: command
    fix_instruction: |
      # TODO: This does not have add...hmmm
      fix_util.ensure_command_always_has_param("apk", "--no-cache")
      fix_util.finish()
    long_description: |
      Apk cache just bloats the image

  - scope: output
    category: Negative
    instruction: |
      layer_count = fs_util.get_layer_count()
      assert(fs_util.look_for_file("/etc/apt/sources.list.d/debian.sources") == -1)
    description: Ensure apt sources are empty
    id: apt_sources_empty
    target: fs
    fix_instruction: |
      # try to append apt command run instruction to not introduce an additional layer
      if not fix_util.append_run_instruction_with_match("apt", "rm -rf /etc/apt/sources.list.d/*"):
        fix_util.add_run_instruction("rm -rf /etc/apt/sources.list.d/*")
      fix_util.finish()
    long_description: |
      The apt sources are generally not needed in a production image and therefore only add bloat and attack vectors. Installing apt packages after container start violates the idea of an immutable container.

  - scope: output
    category: Negative
    instruction: |
      layer_count = fs_util.get_layer_count()
      assert(fs_util.look_for_file("/usr/src") == -1)
    description: Ensure the /usr/src is cleaned up
    id: /usr/src empty
    target: fs
    fix_instruction: |
      fix_util.add_run_instruction("rm -rf /usr/src/*")
      fix_util.finish()
    long_description: |
      The /usr/src directory is generally used for source files. Containers should only contain finished builds, not actual source files for security and bloat reasons.
   
  - scope: output
    category: Negative
    instruction: |
      assert(os_util.exec_command("whoami") != "root")
    description: Final user should not be root
    id: user_not_root
    target: os
    fix_instruction: |
      fix_util.create_user("nonroot")
      fix_util.finish()
    long_description: |
      The root user is the most powerful user on a linux machine. Running a process adds additional risks in the case of said process being vulnerable. In most cases, starting the process as a 'weaker' user is sufficient.

  - scope: output
    category: Negative
    instruction: |
      assert(command_util.command_always_has_param("gpg","--batch"))
    description: Ensure that gpg has the --batch flag
    fix_instruction: |
      fix_util.ensure_command_always_has_param("gpg", "--batch")
      fix_util.finish()
    id: gpg_always_batch
    target: command

  - scope: output
    category: Negative
    instruction: |
      if command_util.uses_command("npm install") || command_util.uses_command("npm ci"):
        assert(command_util.uses_command("npm cache clean"))
    description: Use npm cache clean after an npm install
    id: clean_npm_cache_after_npm_install
    target: command
    fix_instruction: |
      if not (fix_util.append_run_instruction_with_match("npm install", "npm cache clean") or fix_util.append_run_instruction_with_match("npm ci", "npm cache clean")):
        fix_util.add_run_instruction("npm cache clean")
      fix_util.finish()
    long_description: |
      Npm cache should always be cleaned. Keeping the npm cache just leads to image bloat

  - scope: output
    category: Negative
    instruction: |
      assert(command_util.command_always_has_param("npm cache clean","--force"))
    description: Ensure npm cache clean always uses the --force flag
    id: npm_cache_clean_always_use_force
    target: command
    fix_instruction: |
      fix_util.ensure_command_always_has_param("npm cache clean", "--force")
      fix_util.finish()
    long_description: |
      Npm cache clean in a Dockerfile should always use --force

  - scope: output
    category: Negative
    instruction: |
      assert(command_util.command_always_has_param("pip","--no-cache-dir"))
    description: Ensure pip doesnt cache downloads
    id: pip_always_no_cache
    target: command
    fix_instruction: |
      fix_util.ensure_command_always_has_param("pip", "--no-cache-dir")
      fix_util.finish()
    long_description: |
      A pip cache just bloats the docker container and does not provide any useful speedups

  - scope: output
    category: Negative
    instruction: |
      if command_util.uses_command("gem update --system"):
        assert(fs_util.look_for_file("/root/.gem") == -1)
    description: Clean gem cache after install
    id: clean_gem_cache
    target: command
    fix_instruction: |
      if not fix_util.append_run_instruction_with_match("gem", "rm -rf /root/.gem"):
        fix_util.add_run_instruction("rm -rf rm -rf /root/.gem")
      fix_util.finish()
    long_description: |
      Gem cache should always be cleaned. Keeping the npm cache just leads to image bloat

  - scope: output
    category: Negative
    instruction: |
      assert(command_util.command_always_has_param("yum","-y"))
    description: Use yes flag for yum
    id: yum_always_yes
    target: command
    fix_instruction: |
      fix_util.ensure_command_always_has_param("yum", "-y")
      fix_util.finish()
    long_description: |
      Interactive package manager prompts cannot be answered during a docker build process

  - scope: output
    category: Negative
    instruction: |
      if command_util.uses_command("yum install"):
        assert(fs_util.look_for_file("/var/cache/yum") == -1)
    description: Clear yum cache
    id: yum_rm_rache
    target: command
    fix_instruction: |
      if not fix_util.append_run_instruction_with_match("yum", "rm -rf /var/cache/yum"):
        fix_util.add_run_instruction("rm -rf /var/cache/yum")
      fix_util.finish()
    long_description: |
      The yum cache does not serve any purpose at container runtime

